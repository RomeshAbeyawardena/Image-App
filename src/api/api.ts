/* tslint:disable */
/* eslint-disable */
/**
 * ImageApp.Web
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import type { Configuration } from './configuration';
import type { AxiosPromise, AxiosInstance, AxiosRequestConfig } from 'axios';
import globalAxios from 'axios';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setOAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction } from './common';
import type { RequestArgs } from './base';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, BaseAPI, RequiredError } from './base';

/**
 * 
 * @export
 * @interface BulkImportRequest
 */
export interface BulkImportRequest {
    /**
     * 
     * @type {Array<string>}
     * @memberof BulkImportRequest
     */
    'imageFiles'?: Array<string> | null;
}
/**
 * 
 * @export
 * @interface Image
 */
export interface Image {
    /**
     * 
     * @type {string}
     * @memberof Image
     */
    'id'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof Image
     */
    'name'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof Image
     */
    'fileName'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof Image
     */
    'created'?: string;
    /**
     * 
     * @type {string}
     * @memberof Image
     */
    'modified'?: string | null;
    /**
     * 
     * @type {number}
     * @memberof Image
     */
    'index'?: number;
}
/**
 * 
 * @export
 * @interface ImageIPagedResult
 */
export interface ImageIPagedResult {
    /**
     * 
     * @type {number}
     * @memberof ImageIPagedResult
     */
    'pageNumber'?: number;
    /**
     * 
     * @type {number}
     * @memberof ImageIPagedResult
     */
    'numberOfPages'?: number;
    /**
     * 
     * @type {number}
     * @memberof ImageIPagedResult
     */
    'totalItems'?: number;
    /**
     * 
     * @type {Array<Image>}
     * @memberof ImageIPagedResult
     */
    'results'?: Array<Image> | null;
    /**
     * 
     * @type {any}
     * @memberof ImageIPagedResult
     */
    'value'?: any | null;
    /**
     * 
     * @type {string}
     * @memberof ImageIPagedResult
     */
    'message'?: string | null;
    /**
     * 
     * @type {number}
     * @memberof ImageIPagedResult
     */
    'statusCode'?: number | null;
    /**
     * 
     * @type {boolean}
     * @memberof ImageIPagedResult
     */
    'isSuccessful'?: boolean;
}
/**
 * 
 * @export
 * @interface ImageImport
 */
export interface ImageImport {
    /**
     * 
     * @type {string}
     * @memberof ImageImport
     */
    'relatedImageImportId'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof ImageImport
     */
    'id'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof ImageImport
     */
    'fileName'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof ImageImport
     */
    'lastAttempted'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof ImageImport
     */
    'importedDate'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof ImageImport
     */
    'created'?: string;
    /**
     * 
     * @type {string}
     * @memberof ImageImport
     */
    'imageId'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof ImageImport
     */
    'bulkImport'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof ImageImport
     */
    'bulkImporterSeparator'?: string | null;
    /**
     * 
     * @type {boolean}
     * @memberof ImageImport
     */
    'isDuplicate'?: boolean;
}
/**
 * 
 * @export
 * @interface ImageImportIPagedResult
 */
export interface ImageImportIPagedResult {
    /**
     * 
     * @type {number}
     * @memberof ImageImportIPagedResult
     */
    'pageNumber'?: number;
    /**
     * 
     * @type {number}
     * @memberof ImageImportIPagedResult
     */
    'numberOfPages'?: number;
    /**
     * 
     * @type {number}
     * @memberof ImageImportIPagedResult
     */
    'totalItems'?: number;
    /**
     * 
     * @type {Array<ImageImport>}
     * @memberof ImageImportIPagedResult
     */
    'results'?: Array<ImageImport> | null;
    /**
     * 
     * @type {any}
     * @memberof ImageImportIPagedResult
     */
    'value'?: any | null;
    /**
     * 
     * @type {string}
     * @memberof ImageImportIPagedResult
     */
    'message'?: string | null;
    /**
     * 
     * @type {number}
     * @memberof ImageImportIPagedResult
     */
    'statusCode'?: number | null;
    /**
     * 
     * @type {boolean}
     * @memberof ImageImportIPagedResult
     */
    'isSuccessful'?: boolean;
}
/**
 * 
 * @export
 * @enum {string}
 */

export const SortOrder = {
    Ascending: 'Ascending',
    Descending: 'Descending'
} as const;

export type SortOrder = typeof SortOrder[keyof typeof SortOrder];


/**
 * 
 * @export
 * @interface StatusResponse
 */
export interface StatusResponse {
    /**
     * 
     * @type {boolean}
     * @memberof StatusResponse
     */
    'isSuccessful'?: boolean;
    /**
     * 
     * @type {string}
     * @memberof StatusResponse
     */
    'statusMessage'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof StatusResponse
     */
    'id'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof StatusResponse
     */
    'lastUpdated'?: string | null;
    /**
     * 
     * @type {number}
     * @memberof StatusResponse
     */
    'total'?: number | null;
    /**
     * 
     * @type {number}
     * @memberof StatusResponse
     */
    'remaining'?: number | null;
}

/**
 * DefaultApi - axios parameter creator
 * @export
 */
export const DefaultApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @param {BulkImportRequest} [bulkImportRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiImageBulkImportPost: async (bulkImportRequest?: BulkImportRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/image/bulk-import`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(bulkImportRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {number} [pageIndex] 
         * @param {number} [totalItemsPerPage] 
         * @param {Array<string>} [orderByFields] 
         * @param {SortOrder} [sortOrder] 
         * @param {boolean} [noTracking] 
         * @param {string} [fileName] 
         * @param {string} [name] 
         * @param {string} [id] 
         * @param {number} [index] 
         * @param {string} [comment] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiImageGet: async (pageIndex?: number, totalItemsPerPage?: number, orderByFields?: Array<string>, sortOrder?: SortOrder, noTracking?: boolean, fileName?: string, name?: string, id?: string, index?: number, comment?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/image`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (pageIndex !== undefined) {
                localVarQueryParameter['PageIndex'] = pageIndex;
            }

            if (totalItemsPerPage !== undefined) {
                localVarQueryParameter['TotalItemsPerPage'] = totalItemsPerPage;
            }

            if (orderByFields) {
                localVarQueryParameter['OrderByFields'] = orderByFields;
            }

            if (sortOrder !== undefined) {
                localVarQueryParameter['SortOrder'] = sortOrder;
            }

            if (noTracking !== undefined) {
                localVarQueryParameter['NoTracking'] = noTracking;
            }

            if (fileName !== undefined) {
                localVarQueryParameter['FileName'] = fileName;
            }

            if (name !== undefined) {
                localVarQueryParameter['Name'] = name;
            }

            if (id !== undefined) {
                localVarQueryParameter['Id'] = id;
            }

            if (index !== undefined) {
                localVarQueryParameter['Index'] = index;
            }

            if (comment !== undefined) {
                localVarQueryParameter['Comment'] = comment;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} imageId 
         * @param {string} [id] 
         * @param {string} [name] 
         * @param {string} [fileName] 
         * @param {string} [created] 
         * @param {string} [modified] 
         * @param {number} [index] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiImageImageIdPut: async (imageId: string, id?: string, name?: string, fileName?: string, created?: string, modified?: string, index?: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'imageId' is not null or undefined
            assertParamExists('apiImageImageIdPut', 'imageId', imageId)
            const localVarPath = `/api/image/{imageId}`
                .replace(`{${"imageId"}}`, encodeURIComponent(String(imageId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;
            const localVarFormParams = new ((configuration && configuration.formDataCtor) || FormData)();


            if (id !== undefined) { 
                localVarFormParams.append('Id', id as any);
            }
    
            if (name !== undefined) { 
                localVarFormParams.append('Name', name as any);
            }
    
            if (fileName !== undefined) { 
                localVarFormParams.append('FileName', fileName as any);
            }
    
            if (created !== undefined) { 
                localVarFormParams.append('Created', created as any);
            }
    
            if (modified !== undefined) { 
                localVarFormParams.append('Modified', modified as any);
            }
    
            if (index !== undefined) { 
                localVarFormParams.append('Index', index as any);
            }
    
    
            localVarHeaderParameter['Content-Type'] = 'multipart/form-data';
    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = localVarFormParams;

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {number} [pageIndex] 
         * @param {number} [totalItemsPerPage] 
         * @param {Array<string>} [orderByFields] 
         * @param {SortOrder} [sortOrder] 
         * @param {boolean} [noTracking] 
         * @param {string} [fileName] 
         * @param {string} [name] 
         * @param {string} [id] 
         * @param {string} [startDate] 
         * @param {string} [endDate] 
         * @param {boolean} [isImported] 
         * @param {boolean} [isDuplicate] 
         * @param {boolean} [isBulkImport] 
         * @param {string} [relatedImageImportId] 
         * @param {Array<string>} [ids] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiImageImportGet: async (pageIndex?: number, totalItemsPerPage?: number, orderByFields?: Array<string>, sortOrder?: SortOrder, noTracking?: boolean, fileName?: string, name?: string, id?: string, startDate?: string, endDate?: string, isImported?: boolean, isDuplicate?: boolean, isBulkImport?: boolean, relatedImageImportId?: string, ids?: Array<string>, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/image/import`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (pageIndex !== undefined) {
                localVarQueryParameter['PageIndex'] = pageIndex;
            }

            if (totalItemsPerPage !== undefined) {
                localVarQueryParameter['TotalItemsPerPage'] = totalItemsPerPage;
            }

            if (orderByFields) {
                localVarQueryParameter['OrderByFields'] = orderByFields;
            }

            if (sortOrder !== undefined) {
                localVarQueryParameter['SortOrder'] = sortOrder;
            }

            if (noTracking !== undefined) {
                localVarQueryParameter['NoTracking'] = noTracking;
            }

            if (fileName !== undefined) {
                localVarQueryParameter['FileName'] = fileName;
            }

            if (name !== undefined) {
                localVarQueryParameter['Name'] = name;
            }

            if (id !== undefined) {
                localVarQueryParameter['Id'] = id;
            }

            if (startDate !== undefined) {
                localVarQueryParameter['StartDate'] = (startDate as any instanceof Date) ?
                    (startDate as any).toISOString() :
                    startDate;
            }

            if (endDate !== undefined) {
                localVarQueryParameter['EndDate'] = (endDate as any instanceof Date) ?
                    (endDate as any).toISOString() :
                    endDate;
            }

            if (isImported !== undefined) {
                localVarQueryParameter['IsImported'] = isImported;
            }

            if (isDuplicate !== undefined) {
                localVarQueryParameter['IsDuplicate'] = isDuplicate;
            }

            if (isBulkImport !== undefined) {
                localVarQueryParameter['IsBulkImport'] = isBulkImport;
            }

            if (relatedImageImportId !== undefined) {
                localVarQueryParameter['RelatedImageImportId'] = relatedImageImportId;
            }

            if (ids) {
                localVarQueryParameter['Ids'] = ids;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} imageImportId 
         * @param {string} [relatedImageImportId] 
         * @param {string} [id] 
         * @param {string} [fileName] 
         * @param {string} [created] 
         * @param {string} [importedDate] 
         * @param {string} [lastAttempted] 
         * @param {boolean} [commitChanges] 
         * @param {string} [imageId] 
         * @param {string} [bulkImport] 
         * @param {string} [bulkImporterSeparator] 
         * @param {boolean} [isDuplicate] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiImageImportImageImportIdPut: async (imageImportId: string, relatedImageImportId?: string, id?: string, fileName?: string, created?: string, importedDate?: string, lastAttempted?: string, commitChanges?: boolean, imageId?: string, bulkImport?: string, bulkImporterSeparator?: string, isDuplicate?: boolean, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'imageImportId' is not null or undefined
            assertParamExists('apiImageImportImageImportIdPut', 'imageImportId', imageImportId)
            const localVarPath = `/api/image/import/{imageImportId}`
                .replace(`{${"imageImportId"}}`, encodeURIComponent(String(imageImportId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;
            const localVarFormParams = new ((configuration && configuration.formDataCtor) || FormData)();


            if (relatedImageImportId !== undefined) { 
                localVarFormParams.append('RelatedImageImportId', relatedImageImportId as any);
            }
    
            if (id !== undefined) { 
                localVarFormParams.append('Id', id as any);
            }
    
            if (fileName !== undefined) { 
                localVarFormParams.append('FileName', fileName as any);
            }
    
            if (created !== undefined) { 
                localVarFormParams.append('Created', created as any);
            }
    
            if (importedDate !== undefined) { 
                localVarFormParams.append('ImportedDate', importedDate as any);
            }
    
            if (lastAttempted !== undefined) { 
                localVarFormParams.append('LastAttempted', lastAttempted as any);
            }
    
            if (commitChanges !== undefined) { 
                localVarFormParams.append('CommitChanges', commitChanges as any);
            }
    
            if (imageId !== undefined) { 
                localVarFormParams.append('ImageId', imageId as any);
            }
    
            if (bulkImport !== undefined) { 
                localVarFormParams.append('BulkImport', bulkImport as any);
            }
    
            if (bulkImporterSeparator !== undefined) { 
                localVarFormParams.append('BulkImporterSeparator', bulkImporterSeparator as any);
            }
    
            if (isDuplicate !== undefined) { 
                localVarFormParams.append('IsDuplicate', isDuplicate as any);
            }
    
    
            localVarHeaderParameter['Content-Type'] = 'multipart/form-data';
    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = localVarFormParams;

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} [relatedImageImportId] 
         * @param {string} [fileName] 
         * @param {string} [created] 
         * @param {boolean} [commitChanges] 
         * @param {string} [importedDate] 
         * @param {string} [lastAttempted] 
         * @param {string} [imageId] 
         * @param {string} [bulkImport] 
         * @param {string} [bulkImporterSeparator] 
         * @param {boolean} [isDuplicate] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiImageImportPost: async (relatedImageImportId?: string, fileName?: string, created?: string, commitChanges?: boolean, importedDate?: string, lastAttempted?: string, imageId?: string, bulkImport?: string, bulkImporterSeparator?: string, isDuplicate?: boolean, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/image/import`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;
            const localVarFormParams = new ((configuration && configuration.formDataCtor) || FormData)();


            if (relatedImageImportId !== undefined) { 
                localVarFormParams.append('RelatedImageImportId', relatedImageImportId as any);
            }
    
            if (fileName !== undefined) { 
                localVarFormParams.append('FileName', fileName as any);
            }
    
            if (created !== undefined) { 
                localVarFormParams.append('Created', created as any);
            }
    
            if (commitChanges !== undefined) { 
                localVarFormParams.append('CommitChanges', commitChanges as any);
            }
    
            if (importedDate !== undefined) { 
                localVarFormParams.append('ImportedDate', importedDate as any);
            }
    
            if (lastAttempted !== undefined) { 
                localVarFormParams.append('LastAttempted', lastAttempted as any);
            }
    
            if (imageId !== undefined) { 
                localVarFormParams.append('ImageId', imageId as any);
            }
    
            if (bulkImport !== undefined) { 
                localVarFormParams.append('BulkImport', bulkImport as any);
            }
    
            if (bulkImporterSeparator !== undefined) { 
                localVarFormParams.append('BulkImporterSeparator', bulkImporterSeparator as any);
            }
    
            if (isDuplicate !== undefined) { 
                localVarFormParams.append('IsDuplicate', isDuplicate as any);
            }
    
    
            localVarHeaderParameter['Content-Type'] = 'multipart/form-data';
    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = localVarFormParams;

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} [imageImportId] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiImageImportStatusGet: async (imageImportId?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/image/import/status`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (imageImportId !== undefined) {
                localVarQueryParameter['ImageImportId'] = imageImportId;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} [name] 
         * @param {number} [index] 
         * @param {string} [fileName] 
         * @param {string} [created] 
         * @param {string} [modified] 
         * @param {boolean} [commitChanges] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiImagePost: async (name?: string, index?: number, fileName?: string, created?: string, modified?: string, commitChanges?: boolean, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/image`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;
            const localVarFormParams = new ((configuration && configuration.formDataCtor) || FormData)();


            if (name !== undefined) { 
                localVarFormParams.append('Name', name as any);
            }
    
            if (index !== undefined) { 
                localVarFormParams.append('Index', index as any);
            }
    
            if (fileName !== undefined) { 
                localVarFormParams.append('FileName', fileName as any);
            }
    
            if (created !== undefined) { 
                localVarFormParams.append('Created', created as any);
            }
    
            if (modified !== undefined) { 
                localVarFormParams.append('Modified', modified as any);
            }
    
            if (commitChanges !== undefined) { 
                localVarFormParams.append('CommitChanges', commitChanges as any);
            }
    
    
            localVarHeaderParameter['Content-Type'] = 'multipart/form-data';
    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = localVarFormParams;

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * DefaultApi - functional programming interface
 * @export
 */
export const DefaultApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = DefaultApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @param {BulkImportRequest} [bulkImportRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiImageBulkImportPost(bulkImportRequest?: BulkImportRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<string>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiImageBulkImportPost(bulkImportRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {number} [pageIndex] 
         * @param {number} [totalItemsPerPage] 
         * @param {Array<string>} [orderByFields] 
         * @param {SortOrder} [sortOrder] 
         * @param {boolean} [noTracking] 
         * @param {string} [fileName] 
         * @param {string} [name] 
         * @param {string} [id] 
         * @param {number} [index] 
         * @param {string} [comment] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiImageGet(pageIndex?: number, totalItemsPerPage?: number, orderByFields?: Array<string>, sortOrder?: SortOrder, noTracking?: boolean, fileName?: string, name?: string, id?: string, index?: number, comment?: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ImageIPagedResult>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiImageGet(pageIndex, totalItemsPerPage, orderByFields, sortOrder, noTracking, fileName, name, id, index, comment, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {string} imageId 
         * @param {string} [id] 
         * @param {string} [name] 
         * @param {string} [fileName] 
         * @param {string} [created] 
         * @param {string} [modified] 
         * @param {number} [index] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiImageImageIdPut(imageId: string, id?: string, name?: string, fileName?: string, created?: string, modified?: string, index?: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Image>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiImageImageIdPut(imageId, id, name, fileName, created, modified, index, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {number} [pageIndex] 
         * @param {number} [totalItemsPerPage] 
         * @param {Array<string>} [orderByFields] 
         * @param {SortOrder} [sortOrder] 
         * @param {boolean} [noTracking] 
         * @param {string} [fileName] 
         * @param {string} [name] 
         * @param {string} [id] 
         * @param {string} [startDate] 
         * @param {string} [endDate] 
         * @param {boolean} [isImported] 
         * @param {boolean} [isDuplicate] 
         * @param {boolean} [isBulkImport] 
         * @param {string} [relatedImageImportId] 
         * @param {Array<string>} [ids] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiImageImportGet(pageIndex?: number, totalItemsPerPage?: number, orderByFields?: Array<string>, sortOrder?: SortOrder, noTracking?: boolean, fileName?: string, name?: string, id?: string, startDate?: string, endDate?: string, isImported?: boolean, isDuplicate?: boolean, isBulkImport?: boolean, relatedImageImportId?: string, ids?: Array<string>, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ImageImportIPagedResult>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiImageImportGet(pageIndex, totalItemsPerPage, orderByFields, sortOrder, noTracking, fileName, name, id, startDate, endDate, isImported, isDuplicate, isBulkImport, relatedImageImportId, ids, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {string} imageImportId 
         * @param {string} [relatedImageImportId] 
         * @param {string} [id] 
         * @param {string} [fileName] 
         * @param {string} [created] 
         * @param {string} [importedDate] 
         * @param {string} [lastAttempted] 
         * @param {boolean} [commitChanges] 
         * @param {string} [imageId] 
         * @param {string} [bulkImport] 
         * @param {string} [bulkImporterSeparator] 
         * @param {boolean} [isDuplicate] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiImageImportImageImportIdPut(imageImportId: string, relatedImageImportId?: string, id?: string, fileName?: string, created?: string, importedDate?: string, lastAttempted?: string, commitChanges?: boolean, imageId?: string, bulkImport?: string, bulkImporterSeparator?: string, isDuplicate?: boolean, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ImageImport>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiImageImportImageImportIdPut(imageImportId, relatedImageImportId, id, fileName, created, importedDate, lastAttempted, commitChanges, imageId, bulkImport, bulkImporterSeparator, isDuplicate, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {string} [relatedImageImportId] 
         * @param {string} [fileName] 
         * @param {string} [created] 
         * @param {boolean} [commitChanges] 
         * @param {string} [importedDate] 
         * @param {string} [lastAttempted] 
         * @param {string} [imageId] 
         * @param {string} [bulkImport] 
         * @param {string} [bulkImporterSeparator] 
         * @param {boolean} [isDuplicate] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiImageImportPost(relatedImageImportId?: string, fileName?: string, created?: string, commitChanges?: boolean, importedDate?: string, lastAttempted?: string, imageId?: string, bulkImport?: string, bulkImporterSeparator?: string, isDuplicate?: boolean, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ImageImport>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiImageImportPost(relatedImageImportId, fileName, created, commitChanges, importedDate, lastAttempted, imageId, bulkImport, bulkImporterSeparator, isDuplicate, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {string} [imageImportId] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiImageImportStatusGet(imageImportId?: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<StatusResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiImageImportStatusGet(imageImportId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {string} [name] 
         * @param {number} [index] 
         * @param {string} [fileName] 
         * @param {string} [created] 
         * @param {string} [modified] 
         * @param {boolean} [commitChanges] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiImagePost(name?: string, index?: number, fileName?: string, created?: string, modified?: string, commitChanges?: boolean, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Image>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiImagePost(name, index, fileName, created, modified, commitChanges, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * DefaultApi - factory interface
 * @export
 */
export const DefaultApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = DefaultApiFp(configuration)
    return {
        /**
         * 
         * @param {BulkImportRequest} [bulkImportRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiImageBulkImportPost(bulkImportRequest?: BulkImportRequest, options?: any): AxiosPromise<string> {
            return localVarFp.apiImageBulkImportPost(bulkImportRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {number} [pageIndex] 
         * @param {number} [totalItemsPerPage] 
         * @param {Array<string>} [orderByFields] 
         * @param {SortOrder} [sortOrder] 
         * @param {boolean} [noTracking] 
         * @param {string} [fileName] 
         * @param {string} [name] 
         * @param {string} [id] 
         * @param {number} [index] 
         * @param {string} [comment] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiImageGet(pageIndex?: number, totalItemsPerPage?: number, orderByFields?: Array<string>, sortOrder?: SortOrder, noTracking?: boolean, fileName?: string, name?: string, id?: string, index?: number, comment?: string, options?: any): AxiosPromise<ImageIPagedResult> {
            return localVarFp.apiImageGet(pageIndex, totalItemsPerPage, orderByFields, sortOrder, noTracking, fileName, name, id, index, comment, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {string} imageId 
         * @param {string} [id] 
         * @param {string} [name] 
         * @param {string} [fileName] 
         * @param {string} [created] 
         * @param {string} [modified] 
         * @param {number} [index] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiImageImageIdPut(imageId: string, id?: string, name?: string, fileName?: string, created?: string, modified?: string, index?: number, options?: any): AxiosPromise<Image> {
            return localVarFp.apiImageImageIdPut(imageId, id, name, fileName, created, modified, index, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {number} [pageIndex] 
         * @param {number} [totalItemsPerPage] 
         * @param {Array<string>} [orderByFields] 
         * @param {SortOrder} [sortOrder] 
         * @param {boolean} [noTracking] 
         * @param {string} [fileName] 
         * @param {string} [name] 
         * @param {string} [id] 
         * @param {string} [startDate] 
         * @param {string} [endDate] 
         * @param {boolean} [isImported] 
         * @param {boolean} [isDuplicate] 
         * @param {boolean} [isBulkImport] 
         * @param {string} [relatedImageImportId] 
         * @param {Array<string>} [ids] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiImageImportGet(pageIndex?: number, totalItemsPerPage?: number, orderByFields?: Array<string>, sortOrder?: SortOrder, noTracking?: boolean, fileName?: string, name?: string, id?: string, startDate?: string, endDate?: string, isImported?: boolean, isDuplicate?: boolean, isBulkImport?: boolean, relatedImageImportId?: string, ids?: Array<string>, options?: any): AxiosPromise<ImageImportIPagedResult> {
            return localVarFp.apiImageImportGet(pageIndex, totalItemsPerPage, orderByFields, sortOrder, noTracking, fileName, name, id, startDate, endDate, isImported, isDuplicate, isBulkImport, relatedImageImportId, ids, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {string} imageImportId 
         * @param {string} [relatedImageImportId] 
         * @param {string} [id] 
         * @param {string} [fileName] 
         * @param {string} [created] 
         * @param {string} [importedDate] 
         * @param {string} [lastAttempted] 
         * @param {boolean} [commitChanges] 
         * @param {string} [imageId] 
         * @param {string} [bulkImport] 
         * @param {string} [bulkImporterSeparator] 
         * @param {boolean} [isDuplicate] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiImageImportImageImportIdPut(imageImportId: string, relatedImageImportId?: string, id?: string, fileName?: string, created?: string, importedDate?: string, lastAttempted?: string, commitChanges?: boolean, imageId?: string, bulkImport?: string, bulkImporterSeparator?: string, isDuplicate?: boolean, options?: any): AxiosPromise<ImageImport> {
            return localVarFp.apiImageImportImageImportIdPut(imageImportId, relatedImageImportId, id, fileName, created, importedDate, lastAttempted, commitChanges, imageId, bulkImport, bulkImporterSeparator, isDuplicate, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {string} [relatedImageImportId] 
         * @param {string} [fileName] 
         * @param {string} [created] 
         * @param {boolean} [commitChanges] 
         * @param {string} [importedDate] 
         * @param {string} [lastAttempted] 
         * @param {string} [imageId] 
         * @param {string} [bulkImport] 
         * @param {string} [bulkImporterSeparator] 
         * @param {boolean} [isDuplicate] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiImageImportPost(relatedImageImportId?: string, fileName?: string, created?: string, commitChanges?: boolean, importedDate?: string, lastAttempted?: string, imageId?: string, bulkImport?: string, bulkImporterSeparator?: string, isDuplicate?: boolean, options?: any): AxiosPromise<ImageImport> {
            return localVarFp.apiImageImportPost(relatedImageImportId, fileName, created, commitChanges, importedDate, lastAttempted, imageId, bulkImport, bulkImporterSeparator, isDuplicate, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {string} [imageImportId] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiImageImportStatusGet(imageImportId?: string, options?: any): AxiosPromise<StatusResponse> {
            return localVarFp.apiImageImportStatusGet(imageImportId, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {string} [name] 
         * @param {number} [index] 
         * @param {string} [fileName] 
         * @param {string} [created] 
         * @param {string} [modified] 
         * @param {boolean} [commitChanges] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiImagePost(name?: string, index?: number, fileName?: string, created?: string, modified?: string, commitChanges?: boolean, options?: any): AxiosPromise<Image> {
            return localVarFp.apiImagePost(name, index, fileName, created, modified, commitChanges, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * DefaultApi - object-oriented interface
 * @export
 * @class DefaultApi
 * @extends {BaseAPI}
 */
export class DefaultApi extends BaseAPI {
    /**
     * 
     * @param {BulkImportRequest} [bulkImportRequest] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public apiImageBulkImportPost(bulkImportRequest?: BulkImportRequest, options?: AxiosRequestConfig) {
        return DefaultApiFp(this.configuration).apiImageBulkImportPost(bulkImportRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {number} [pageIndex] 
     * @param {number} [totalItemsPerPage] 
     * @param {Array<string>} [orderByFields] 
     * @param {SortOrder} [sortOrder] 
     * @param {boolean} [noTracking] 
     * @param {string} [fileName] 
     * @param {string} [name] 
     * @param {string} [id] 
     * @param {number} [index] 
     * @param {string} [comment] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public apiImageGet(pageIndex?: number, totalItemsPerPage?: number, orderByFields?: Array<string>, sortOrder?: SortOrder, noTracking?: boolean, fileName?: string, name?: string, id?: string, index?: number, comment?: string, options?: AxiosRequestConfig) {
        return DefaultApiFp(this.configuration).apiImageGet(pageIndex, totalItemsPerPage, orderByFields, sortOrder, noTracking, fileName, name, id, index, comment, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {string} imageId 
     * @param {string} [id] 
     * @param {string} [name] 
     * @param {string} [fileName] 
     * @param {string} [created] 
     * @param {string} [modified] 
     * @param {number} [index] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public apiImageImageIdPut(imageId: string, id?: string, name?: string, fileName?: string, created?: string, modified?: string, index?: number, options?: AxiosRequestConfig) {
        return DefaultApiFp(this.configuration).apiImageImageIdPut(imageId, id, name, fileName, created, modified, index, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {number} [pageIndex] 
     * @param {number} [totalItemsPerPage] 
     * @param {Array<string>} [orderByFields] 
     * @param {SortOrder} [sortOrder] 
     * @param {boolean} [noTracking] 
     * @param {string} [fileName] 
     * @param {string} [name] 
     * @param {string} [id] 
     * @param {string} [startDate] 
     * @param {string} [endDate] 
     * @param {boolean} [isImported] 
     * @param {boolean} [isDuplicate] 
     * @param {boolean} [isBulkImport] 
     * @param {string} [relatedImageImportId] 
     * @param {Array<string>} [ids] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public apiImageImportGet(pageIndex?: number, totalItemsPerPage?: number, orderByFields?: Array<string>, sortOrder?: SortOrder, noTracking?: boolean, fileName?: string, name?: string, id?: string, startDate?: string, endDate?: string, isImported?: boolean, isDuplicate?: boolean, isBulkImport?: boolean, relatedImageImportId?: string, ids?: Array<string>, options?: AxiosRequestConfig) {
        return DefaultApiFp(this.configuration).apiImageImportGet(pageIndex, totalItemsPerPage, orderByFields, sortOrder, noTracking, fileName, name, id, startDate, endDate, isImported, isDuplicate, isBulkImport, relatedImageImportId, ids, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {string} imageImportId 
     * @param {string} [relatedImageImportId] 
     * @param {string} [id] 
     * @param {string} [fileName] 
     * @param {string} [created] 
     * @param {string} [importedDate] 
     * @param {string} [lastAttempted] 
     * @param {boolean} [commitChanges] 
     * @param {string} [imageId] 
     * @param {string} [bulkImport] 
     * @param {string} [bulkImporterSeparator] 
     * @param {boolean} [isDuplicate] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public apiImageImportImageImportIdPut(imageImportId: string, relatedImageImportId?: string, id?: string, fileName?: string, created?: string, importedDate?: string, lastAttempted?: string, commitChanges?: boolean, imageId?: string, bulkImport?: string, bulkImporterSeparator?: string, isDuplicate?: boolean, options?: AxiosRequestConfig) {
        return DefaultApiFp(this.configuration).apiImageImportImageImportIdPut(imageImportId, relatedImageImportId, id, fileName, created, importedDate, lastAttempted, commitChanges, imageId, bulkImport, bulkImporterSeparator, isDuplicate, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {string} [relatedImageImportId] 
     * @param {string} [fileName] 
     * @param {string} [created] 
     * @param {boolean} [commitChanges] 
     * @param {string} [importedDate] 
     * @param {string} [lastAttempted] 
     * @param {string} [imageId] 
     * @param {string} [bulkImport] 
     * @param {string} [bulkImporterSeparator] 
     * @param {boolean} [isDuplicate] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public apiImageImportPost(relatedImageImportId?: string, fileName?: string, created?: string, commitChanges?: boolean, importedDate?: string, lastAttempted?: string, imageId?: string, bulkImport?: string, bulkImporterSeparator?: string, isDuplicate?: boolean, options?: AxiosRequestConfig) {
        return DefaultApiFp(this.configuration).apiImageImportPost(relatedImageImportId, fileName, created, commitChanges, importedDate, lastAttempted, imageId, bulkImport, bulkImporterSeparator, isDuplicate, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {string} [imageImportId] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public apiImageImportStatusGet(imageImportId?: string, options?: AxiosRequestConfig) {
        return DefaultApiFp(this.configuration).apiImageImportStatusGet(imageImportId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {string} [name] 
     * @param {number} [index] 
     * @param {string} [fileName] 
     * @param {string} [created] 
     * @param {string} [modified] 
     * @param {boolean} [commitChanges] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public apiImagePost(name?: string, index?: number, fileName?: string, created?: string, modified?: string, commitChanges?: boolean, options?: AxiosRequestConfig) {
        return DefaultApiFp(this.configuration).apiImagePost(name, index, fileName, created, modified, commitChanges, options).then((request) => request(this.axios, this.basePath));
    }
}


